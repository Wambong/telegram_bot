from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ContextTypes, CallbackQueryHandler

from keyboards import get_professions_keyboard
from database import log_interaction  # Add this import
# –ö–Ω–æ–ø–∫–∏ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1
CALCULATOR_BUTTONS_PROF1 = [
    [
        InlineKeyboardButton('-', callback_data='prof1_calc_units_down'),
        InlineKeyboardButton('–ö–æ–ª-–≤–æ –∫–ª–∞–¥–æ–≤', callback_data='prof1_calc_no_op'),
        InlineKeyboardButton('+', callback_data='prof1_calc_units_up'),
    ],
    [
        InlineKeyboardButton('-', callback_data='prof1_calc_days_down'),
        InlineKeyboardButton('–ö–æ–ª-–≤–æ –¥–Ω–µ–π', callback_data='prof1_calc_no_op'),
        InlineKeyboardButton('+', callback_data='prof1_calc_days_up'),
    ],
    [InlineKeyboardButton('–í–µ—Å –∫–ª–∞–¥–æ–≤', callback_data='prof1_calc_edit_weight')],
    [InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', callback_data='prof1_calc_calculate')],
]

# –ö–Ω–æ–ø–∫–∏ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1
CALCULATOR_RESULT_BUTTONS_PROF1 = [
    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É', callback_data='prof1_calc_back')],
    [InlineKeyboardButton('–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?', callback_data='prof1_page2')],
    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?', callback_data='prof1_back_to_professions')],
    [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ courier', url="https://t.me/addstickers/Courier9")],

]


WEIGHT_TO_RATE_PROF1 = {
    1: 1000,
    2: 1050,
    3: 1100,
    5: 1200,
}

# Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
def get_calculator_message_prof1(user_data):
    units = user_data.get('prof1_units_per_day', 10)
    days = user_data.get('prof1_days_per_month', 20)
    weight = user_data.get('prof1_weight', 1)
    weight_options = sorted(WEIGHT_TO_RATE_PROF1.keys())
    current_weight = weight if weight in weight_options else 1

    message = (
        f"üî¢ *–ö–æ–ª-–≤–æ –∫–ª–∞–¥–æ–≤ –≤ –¥–µ–Ω—å:* {units}\n"
        f"üìÖ *–ö–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü:* {days}\n"
        f"‚öñÔ∏è *–í–µ—Å –∫–ª–∞–¥–æ–≤:* {current_weight} –≥\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
    )
    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1
async def handle_profession1_start(query, context: ContextTypes.DEFAULT_TYPE):
    user = query.from_user
    bot_token = context.bot.token

    # Log the interaction
    log_interaction(user.id, bot_token, 'profession1_start', 'Opened profession 1 calculator')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1
    await query.message.reply_photo(
        photo='https://ninjabox.org/storage/de5b125a-c679-49a4-990f-f9618b04ed98/3nnf31pqhtzm952v.jpg',
        caption='*–ö—É—Ä—å–µ—Ä* - –¢—Ä–µ–±—É—é—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏—è.\n\n'
                "‚¨õ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n\n"
                "‚ö´ –û–ø—ã—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: –º—ã –Ω–∞—É—á–∏–º –í–∞—Å –≤—Å–µ–º—É —á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —á—Ç–æ-–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –º–Ω–æ–≥–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n"
                "‚ö´ –†–µ–∞–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: –¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á –≤ —á–∞—Å –ø–æ —Å–∞–º–æ–º—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É!\n"
                "‚ö´ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –≤—ã –≤–Ω–æ—Å–∏—Ç–µ —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –í–∞—à –∑–∞–ª–æ–≥.\n"
                "‚ö´ –°–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: —Ä–∞–±–æ—Ç–∞–π –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –∏–º–µ–Ω–æ —Ç–µ–±–µ! –ù–∏–∫–∞–∫–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –∏ —à—Ç—Ä–∞—Ñ–æ–≤ –æ—Å–Ω–æ–≤–∞–Ω—ã—Ö –Ω–∞ –Ω–∏—Ö.\n"
                "‚ö´ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: —É—á–µ–Ω–∏–∫–∏ –ê–∫–∞–¥–µ–º–∏–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º —Å —à—Ç–∞—Ç–Ω—ã–º–∏ —é—Ä–∏—Å—Ç–∞–º–∏ Blackshisha \n\n"
                "–†–∞—Å—á–∏—Ç–∞–π—Ç–µ —Å–≤–æ—é –ó–ü –≤ –Ω–∞—à–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! \n",
        parse_mode='Markdown',
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    context.user_data['prof1_units_per_day'] = 10
    context.user_data['prof1_days_per_month'] = 20
    context.user_data['prof1_weight'] = 1  # –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å 1 –≥

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    calculator_keyboard = InlineKeyboardMarkup(CALCULATOR_BUTTONS_PROF1)
    await query.message.reply_text(
        get_calculator_message_prof1(context.user_data),
        reply_markup=calculator_keyboard,
        parse_mode='Markdown',
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1
async def handle_prof1_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user = query.from_user
    bot_token = context.bot.token

    if data == 'prof1_calc_units_up':
        units = context.user_data.get('prof1_units_per_day', 10)
        if units < 1000:
            units += 1
            context.user_data['prof1_units_per_day'] = units
        log_interaction(user.id, bot_token, 'prof1_calc', f'units_up: {units}')
        await update_calculator_message_prof1(query, context)

    elif data == 'prof1_calc_units_down':
        units = context.user_data.get('prof1_units_per_day', 10)
        if units > 1:
            units -= 1
            context.user_data['prof1_units_per_day'] = units
        log_interaction(user.id, bot_token, 'prof1_calc', f'units_down: {units}')
        await update_calculator_message_prof1(query, context)

    elif data == 'prof1_calc_days_up':
        days = context.user_data.get('prof1_days_per_month', 20)
        if days < 31:
            days += 1
            context.user_data['prof1_days_per_month'] = days
        log_interaction(user.id, bot_token, 'prof1_calc', f'days_up: {days}')
        await update_calculator_message_prof1(query, context)

    elif data == 'prof1_calc_days_down':
        days = context.user_data.get('prof1_days_per_month', 20)
        if days > 1:
            days -= 1
            context.user_data['prof1_days_per_month'] = days
        log_interaction(user.id, bot_token, 'prof1_calc', f'days_down: {days}')
        await update_calculator_message_prof1(query, context)

    elif data == 'prof1_calc_edit_weight':
        weight = context.user_data.get('prof1_weight', 1)
        weight_options = sorted(WEIGHT_TO_RATE_PROF1.keys())
        current_index = weight_options.index(weight) if weight in weight_options else 0
        next_index = (current_index + 1) % len(weight_options)
        new_weight = weight_options[next_index]
        context.user_data['prof1_weight'] = new_weight  # <-- Closing quote added here
        log_interaction(user.id, bot_token, 'prof1_calc', f'weight_change: {new_weight}g')
        await update_calculator_message_prof1(query, context)

    elif data == 'prof1_calc_calculate':
        units = context.user_data.get('prof1_units_per_day', 10)
        days = context.user_data.get('prof1_days_per_month', 20)
        weight = context.user_data.get('prof1_weight', 1)
        rate = WEIGHT_TO_RATE_PROF1.get(weight, 0)

        earn_day = rate * units
        earn_month = earn_day * days
        earn_year = earn_month * 12

        log_interaction(
            user.id,
            bot_token,
            'prof1_calculation',
            f'units:{units}, days:{days}, weight:{weight}g, earn_day:{earn_day}, earn_month:{earn_month}'
        )

        result_message = (
            f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:**\n\n"
            f"üí∞ *–ó–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∑–∞ –¥–µ–Ω—å:* {earn_day} ‚ÇΩ\n"
            f"üí∞ *–ó–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∑–∞ –º–µ—Å—è—Ü:* {earn_month} ‚ÇΩ\n"
            f"üí∞ *–ó–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∑–∞ –≥–æ–¥:* {earn_year} ‚ÇΩ\n"
        )

        await query.edit_message_text(
            result_message,
            reply_markup=InlineKeyboardMarkup(CALCULATOR_RESULT_BUTTONS_PROF1),
            parse_mode='Markdown',
        )

    elif data == 'prof1_calc_back':
        log_interaction(user.id, bot_token, 'prof1_navigation', 'back_to_calculator')
        await query.edit_message_text(
            get_calculator_message_prof1(context.user_data),
            reply_markup=InlineKeyboardMarkup(CALCULATOR_BUTTONS_PROF1),
            parse_mode='Markdown',
        )

    elif data == 'prof1_back_to_professions':
        log_interaction(user.id, bot_token, 'prof1_navigation', 'back_to_professions')
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é",
            reply_markup=get_professions_keyboard()
        )

    elif data == 'prof1_calc_no_op':
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass

    elif data == 'prof1_page2':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2
        log_interaction(user.id, bot_token, 'prof1_navigation', 'view_page2')
        await send_prof1_page2(query, context)

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1
async def update_calculator_message_prof1(query, context):
    await query.edit_message_text(
        get_calculator_message_prof1(context.user_data),
        reply_markup=InlineKeyboardMarkup(CALCULATOR_BUTTONS_PROF1),
        parse_mode='Markdown',
    )
PAGE2_IMAGE_URL = 'https://ninjabox.org/storage/de5b125a-c679-49a4-990f-f9618b04ed98/3nnf31pqhtzm952v.jpg'
CONTENT = {
    'page2': {
        'text':'ü•∑–ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å Blackshisha –ø—Ä–æ—Å—Ç–æ! \n\n'
                '1. –£—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞ —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ VPN ‚Äî –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–≤–æ–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.\n\n'
                '2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ blackshisha.com –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º.\n\n'
                '3. –ü—Ä–æ–π–¥–∏ –æ–±—É—á–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –∞ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç—Å—è –≤—ã–¥–∞—á–µ–π —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!\n\n'
                ,
        'image': PAGE2_IMAGE_URL,
        'buttons': [
            [InlineKeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ VPN –∏ –∑–∞—á–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?', url="https://telegra.ph/What-is-VPN-How-It-Works-Types-of-VPN-07-30/")],
            [InlineKeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ Tor Browser.\n\n', url="https://telegra.ph/Tor-Browser---A-Complete-Overview-07-30")],
            [InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ö.', url="https://Blackshisha.com")],
            [InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ', url="https://Blackshisha.com")],
            [InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url="https://t.me/wa_mb")],
        ],
    },
}

async def send_prof1_page2(query, context):
    user = query.from_user
    bot_token = context.bot.token
    log_interaction(user.id, bot_token, 'prof1_page2', 'viewed_instructions')
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2 –∏–∑ CONTENT
    page2_content = CONTENT['page2']
    await query.message.reply_photo(
        photo=page2_content['image'],
        caption=page2_content['text'],
        reply_markup=InlineKeyboardMarkup(page2_content['buttons']),
        parse_mode='Markdown',
    )


# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1
def setup_handlers(app):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1
    app.add_handler(CallbackQueryHandler(handle_prof1_calculator, pattern='^prof1_.*$'))
