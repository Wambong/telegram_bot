from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ContextTypes, CallbackQueryHandler

from keyboards import get_professions_keyboard

from database import log_interaction  # Add this import

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
PRODUCTS = {
    '–ú—É–∫–∞': {
        'production_time': '8-12 —á–∞—Å–æ–≤',
        'raw_material_cost_per_ton': 66000,
        'selling_price_per_ton': 300000,
        'delivery_multiplier': 1.0,
    },
    '–º–∞—Ç–µ—Ä–∏–∞–ª': {
        'production_time': '3-7 –¥–Ω–µ–π',
        'raw_material_cost_per_ton': 99000,
        'selling_price_per_ton': 400000,
        'delivery_multiplier': 1.5,
    },
}

# –û–ø—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
DELIVERY_OPTIONS = ['–ú–æ—Å–∫–≤–∞', '–†–µ–≥–∏–æ–Ω—ã']
DELIVERY_COST_MOSCOW = 30000  # —Ä—É–±–ª–µ–π
DELIVERY_COST_PER_KM = 130    # —Ä—É–±–ª–µ–π –∑–∞ –∫–º

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
DEFAULT_PRODUCT = '–ú—É–∫–∞'
DEFAULT_WEIGHT = 1  # —Ç–æ–Ω–Ω
DEFAULT_DELIVERY = '–ú–æ—Å–∫–≤–∞'
DEFAULT_DISTANCE = 350  # –∫–º

# –ö–Ω–æ–ø–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 3
CALCULATOR_BUTTONS_PROF3 = [
    [
        InlineKeyboardButton('–ú—É–∫–∞', callback_data='prof3_select_product1'),
        InlineKeyboardButton('–º–∞—Ç–µ—Ä–∏–∞–ª', callback_data='prof3_select_product2'),
    ],
    [
        InlineKeyboardButton('-', callback_data='prof3_weight_down'),
        InlineKeyboardButton('–í–µ—Å', callback_data='prof3_no_op'),
        InlineKeyboardButton('+', callback_data='prof3_weight_up'),
    ],
    [
        InlineKeyboardButton('–ú–æ—Å–∫–≤–∞', callback_data='prof3_select_moscow'),
        InlineKeyboardButton('–†–µ–≥–∏–æ–Ω—ã', callback_data='prof3_select_regions'),
    ],
    [InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', callback_data='prof3_calc_calculate')],
]

# –ö–Ω–æ–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 3
CALCULATOR_RESULT_BUTTONS_PROF3 = [
    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É', callback_data='prof3_calc_back')],
    [InlineKeyboardButton('–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?', callback_data='prof3_page2')],
    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?', callback_data='prof3_back_to_professions')],
    [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ ', url="https://tlgrm.eu/stickers/summer_day")],
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
def get_calculator_message_prof3(user_data):
    product = user_data.get('prof3_product', DEFAULT_PRODUCT)
    weight = user_data.get('prof3_weight', DEFAULT_WEIGHT)
    delivery = user_data.get('prof3_delivery', DEFAULT_DELIVERY)
    distance = user_data.get('prof3_distance', DEFAULT_DISTANCE)  # –ê–∫—Ç—É–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è "–†–µ–≥–∏–æ–Ω—ã"

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    product_info = PRODUCTS[product]
    raw_material_cost = product_info['raw_material_cost_per_ton'] * weight

    if delivery == '–ú–æ—Å–∫–≤–∞':
        delivery_info = '–ú–æ—Å–∫–≤–∞'
    else:
        delivery_info = f'{distance} –∫–º'



    message = (
        f"**–†–∞—Å—Å—á–∏—Ç–∞–π —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:**\n\n"
        f"üß™ *–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞:* {product}\n"
        f"‚öñÔ∏è *–ò–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º—ã–π –≤–µ—Å:* {weight} –∫–≥\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–∫—É—Ä—Å–æ—Ä–æ–≤:* {raw_material_cost} ‚ÇΩ\n"
        f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–µ–∫—É—Ä—Å–æ—Ä–æ–≤:* {delivery_info}\n\n"
        f"–í—ã–±–µ—Ä–∏ —á—Ç–æ –±—É–¥–µ—à—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫—É–¥–∞ –≤–µ–∑—Ç–∏ –ø—Ä–µ–∫—É—Ä—Å–æ—Ä—ã."
    )
    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 3
async def handle_profession3_start(query, context: ContextTypes.DEFAULT_TYPE):
    user = query.from_user
    bot_token = context.bot.token

    # Log the interaction
    log_interaction(user.id, bot_token, 'profession3_start', 'Opened chemistry calculator')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 3
    await query.message.reply_photo(
        photo='https://ninjabox.org/storage/b3e0a2d0-75fb-4a4a-a058-7f14fed151b1/bwg2uilidkeqtlzt.jpg',
        caption='*–¢–µ—Ö–Ω–æ–ª–æ–≥ ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º –≤ –ª–µ–≥–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.*\n\n'
            'üüß *–í—ã –ø–æ–ª—É—á–∏—Ç–µ:*\n\n'
            'üü† *–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:* –æ–±—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.\n'
            'üü† *–ó–Ω–∞–Ω–∏—è:* —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Ç–∞–±–∞—á–Ω–æ–π –∏ —Å–º–µ–∂–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.\n'
            'üü† *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:* –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ö—Ä–∞–Ω–µ–Ω–∏—é –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n'
            'üü† *–°–≤–æ—è –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è:* –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.\n'
            'üü† *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–≤—è–∑—å —Å –æ–ø—ã—Ç–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∞–º–∏ –∏–∑ –æ—Ç—Ä–∞—Å–ª–∏.\n\n',

        parse_mode='Markdown',
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    context.user_data['prof3_product'] = DEFAULT_PRODUCT
    context.user_data['prof3_weight'] = DEFAULT_WEIGHT
    context.user_data['prof3_delivery'] = DEFAULT_DELIVERY
    context.user_data['prof3_distance'] = DEFAULT_DISTANCE

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    calculator_keyboard = InlineKeyboardMarkup(CALCULATOR_BUTTONS_PROF3)
    await query.message.reply_text(
        get_calculator_message_prof3(context.user_data),
        reply_markup=calculator_keyboard,
        parse_mode='Markdown',
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 3
async def handle_prof3_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    user = query.from_user
    bot_token = context.bot.token

    if data == 'prof3_select_product1':
        context.user_data['prof3_product'] = '–ú—É–∫–∞'
        log_interaction(user.id, bot_token, 'prof3_calc', 'selected_product: –ú—É–∫–∞')
        await update_calculator_message_prof3(query, context)
    elif data == 'prof3_select_product2':
        context.user_data['prof3_product'] = '–º–∞—Ç–µ—Ä–∏–∞–ª'
        log_interaction(user.id, bot_token, 'prof3_calc', 'selected_product: –º–∞—Ç–µ—Ä–∏–∞–ª')
        await update_calculator_message_prof3(query, context)
    elif data == 'prof3_weight_up':
        weight = context.user_data.get('prof3_weight', DEFAULT_WEIGHT)
        weight += 1
        context.user_data['prof3_weight'] = weight
        log_interaction(user.id, bot_token, 'prof3_calc', f'weight_up: {weight}kg')
        await update_calculator_message_prof3(query, context)
    elif data == 'prof3_weight_down':
        weight = context.user_data.get('prof3_weight', DEFAULT_WEIGHT)
        if weight > 1:
            weight -= 1
            context.user_data['prof3_weight'] = weight
        log_interaction(user.id, bot_token, 'prof3_calc', f'weight_down: {weight}kg')
        await update_calculator_message_prof3(query, context)
    elif data == 'prof3_select_moscow':
        context.user_data['prof3_delivery'] = '–ú–æ—Å–∫–≤–∞'
        log_interaction(user.id, bot_token, 'prof3_calc', 'delivery: –ú–æ—Å–∫–≤–∞')
        await update_calculator_message_prof3(query, context)
    elif data == 'prof3_select_regions':
        context.user_data['prof3_delivery'] = '–†–µ–≥–∏–æ–Ω—ã'
        log_interaction(user.id, bot_token, 'prof3_calc', 'delivery: –†–µ–≥–∏–æ–Ω—ã')
        await show_regions_distance_menu(query, context)
    elif data == 'prof3_distance_up':
        distance = context.user_data.get('prof3_distance', DEFAULT_DISTANCE)
        if distance < 10000:
            distance += 50
            context.user_data['prof3_distance'] = distance
        log_interaction(user.id, bot_token, 'prof3_calc', f'distance_up: {distance}km')
        await show_regions_distance_menu(query, context)
    elif data == 'prof3_distance_down':
        distance = context.user_data.get('prof3_distance', DEFAULT_DISTANCE)
        if distance > 50:
            distance -= 50
            context.user_data['prof3_distance'] = distance
        log_interaction(user.id, bot_token, 'prof3_calc', f'distance_down: {distance}km')
        await show_regions_distance_menu(query, context)
    elif data == 'prof3_back_to_calculator':
        log_interaction(user.id, bot_token, 'prof3_navigation', 'back_to_calculator')
        await update_calculator_message_prof3(query, context)
    elif data == 'prof3_calc_calculate':
        await calculate_results_prof3(query, context)
    elif data == 'prof3_calc_back':
        log_interaction(user.id, bot_token, 'prof3_navigation', 'back_to_calculator')
        await update_calculator_message_prof3(query, context)
    elif data == 'prof3_back_to_professions':
        log_interaction(user.id, bot_token, 'prof3_navigation', 'back_to_professions')
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é",
            reply_markup=get_professions_keyboard()
        )
    elif data == 'prof3_no_op':
        pass
    elif data == 'prof3_page2':
        log_interaction(user.id, bot_token, 'prof3_navigation', 'view_page2')
        await send_prof3_page2(query, context)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
async def show_regions_distance_menu(query, context):
    distance = context.user_data.get('prof3_distance', DEFAULT_DISTANCE)

    keyboard = [
        [
            InlineKeyboardButton('-', callback_data='prof3_distance_down'),
            InlineKeyboardButton(f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance} –∫–º', callback_data='prof3_no_op'),
            InlineKeyboardButton('+', callback_data='prof3_distance_up'),
        ],
        [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É', callback_data='prof3_back_to_calculator')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ú–æ—Å–∫–≤—ã:",
        reply_markup=reply_markup,
        parse_mode='Markdown',
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 3
async def update_calculator_message_prof3(query, context):
    await query.edit_message_text(
        get_calculator_message_prof3(context.user_data),
        reply_markup=InlineKeyboardMarkup(CALCULATOR_BUTTONS_PROF3),
        parse_mode='Markdown',
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def calculate_results_prof3(query, context):
    user = query.from_user
    bot_token = context.bot.token
    product = context.user_data.get('prof3_product', DEFAULT_PRODUCT)
    weight = context.user_data.get('prof3_weight', DEFAULT_WEIGHT)
    delivery = context.user_data.get('prof3_delivery', DEFAULT_DELIVERY)
    distance = context.user_data.get('prof3_distance', DEFAULT_DISTANCE)


    product_info = PRODUCTS[product]
    raw_material_cost_per_ton = product_info['raw_material_cost_per_ton']
    selling_price_per_ton = product_info['selling_price_per_ton']
    delivery_multiplier = product_info.get('delivery_multiplier', 1.0)

    # –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–∞
    income = selling_price_per_ton * weight
    weightdost = weight


    # –†–∞—Å—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
    raw_material_cost = raw_material_cost_per_ton * weight
    if delivery == '–ú–æ—Å–∫–≤–∞':
        delivery_cost = DELIVERY_COST_MOSCOW * weight * delivery_multiplier
    else:
        delivery_cost = distance * DELIVERY_COST_PER_KM * weight * delivery_multiplier


    total_expenses = raw_material_cost + delivery_cost



    # –†–∞—Å—á—ë—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏
    net_profit = income - total_expenses
    time_spent = product_info['production_time']

    log_interaction(
        user.id,
        bot_token,
        'prof3_calculation',
        f'product:{product}, weight:{weight}kg, delivery:{delivery}, ' +
        f'distance:{distance}km, income:{income}, net_profit:{net_profit}'
    )

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_message = (
        f"**–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å:**\n\n"
        f"üí∞ *–î–æ—Ö–æ–¥ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ {product}:* {income} ‚ÇΩ\n"
        f"üí∏ *–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–µ–∫—É—Ä—Å–æ—Ä—ã:* {raw_material_cost} ‚ÇΩ\n"
        f"üöö *–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–µ–∫—É—Ä—Å–æ—Ä–æ–≤:* {delivery_cost}‚ÇΩ\n"
        f"üíµ *–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:* {net_profit} ‚ÇΩ\n"
        f"üíµ *–ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {time_spent} ‚ÇΩ\n"

    )

    # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞
    keyboard = [
        [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É', callback_data='prof3_calc_back')],
        [InlineKeyboardButton('–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?', callback_data='prof3_page2')],
        [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?', callback_data='prof3_back_to_professions')],
        [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –ê–∫–∞–¥–µ–º–∏–∏ producer', url="https://t.me/addstickers/Transport881")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        result_message,
        reply_markup=reply_markup,
        parse_mode='Markdown',
    )

PAGE2_IMAGE_URL = 'https://ninjabox.org/storage/b3e0a2d0-75fb-4a4a-a058-7f14fed151b1/bwg2uilidkeqtlzt.jpg'
CONTENT = {
    'page2': {
        'text': 'ü•∑–ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å Blackshisha, –ø—Ä–æ—Å—Ç–æ! \n\n'
                '1. –£—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞ —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ VPN ‚Äî –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–≤–æ–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.\n\n'
                '2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ blackshisha.com –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º.\n\n'
                '3. –ü—Ä–æ–π–¥–∏ –æ–±—É—á–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –∞ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç—Å—è –≤—ã–¥–∞—á–µ–π —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!\n\n'
                ,
        'image': PAGE2_IMAGE_URL,
        'buttons': [
            [InlineKeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ VPN –∏ –∑–∞—á–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?', url="https://telegra.ph/What-is-VPN-How-It-Works-Types-of-VPN-07-30")],
            [InlineKeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ Tor Browser.\n\n', url="https://telegra.ph/Tor-Browser---A-Complete-Overview-07-30")],
            [InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ö.', url="https://Blackshisha.com")],
            [InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ', url="https://Blackshisha.com")],
            [InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url="https://t.me/wa_mb")],
        ],
    },
}

async def send_prof3_page2(query, context):
    user = query.from_user
    bot_token = context.bot.token
    log_interaction(user.id, bot_token, 'prof3_page2', 'viewed_instructions')
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2 –∏–∑ CONTENT
    page2_content = CONTENT['page2']
    await query.message.reply_photo(
        photo=page2_content['image'],
        caption=page2_content['text'],
        reply_markup=InlineKeyboardMarkup(page2_content['buttons']),
        parse_mode='Markdown',
    )
# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 3
def setup_handlers(app):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 3
    app.add_handler(CallbackQueryHandler(handle_prof3_calculator, pattern='^prof3_.*$'))
