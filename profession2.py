from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ContextTypes, CallbackQueryHandler

from keyboards import get_professions_keyboard
from database import log_interaction  # Add this import

# –ö–Ω–æ–ø–∫–∏ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2
CALCULATOR_BUTTONS_PROF2 = [
    [
        InlineKeyboardButton('-', callback_data='prof2_calc_total_weight_down'),
        InlineKeyboardButton('–û–±—â–∏–π –≤–µ—Å', callback_data='prof2_calc_no_op'),
        InlineKeyboardButton('+', callback_data='prof2_calc_total_weight_up'),
    ],
    [
        InlineKeyboardButton('-', callback_data='prof2_calc_distance_down'),
        InlineKeyboardButton('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ', callback_data='prof2_calc_no_op'),
        InlineKeyboardButton('+', callback_data='prof2_calc_distance_up'),
    ],
    [
        InlineKeyboardButton('-', callback_data='prof2_calc_units_down'),
        InlineKeyboardButton('–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤', callback_data='prof2_calc_no_op'),
        InlineKeyboardButton('+', callback_data='prof2_calc_units_up'),
    ],
    [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å –∑–∞–∫–∞–∑–æ–≤', callback_data='prof2_calc_edit_order_weight')],
    [InlineKeyboardButton('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', callback_data='prof2_calc_calculate')],
]

# –ö–Ω–æ–ø–∫–∏ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2
CALCULATOR_RESULT_BUTTONS_PROF2 = [
    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É', callback_data='prof2_calc_back')],
    [InlineKeyboardButton('–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?', callback_data='prof2_page2')],
    [InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?', callback_data='prof2_back_to_professions')],
    [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ transport', url="https://t.me/addstickers/Transport881")],
]

# –û–ø—Ü–∏–∏ –≤–µ—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å
ORDER_WEIGHT_OPTIONS = [
    '–æ—Ç 5 –¥–æ 10 –≥',
    '–æ—Ç 11 –¥–æ 25 –≥',
    '–æ—Ç 26 –¥–æ 100 –≥',
    '–æ—Ç 101 –¥–æ 250 –≥',
    '–æ—Ç 251 –¥–æ 500 –≥',
    '–æ—Ç 501 –¥–æ 1000 –≥',
]

ORDER_WEIGHT_COSTS = {
    '–æ—Ç 5 –¥–æ 10 –≥': 1000,
    '–æ—Ç 11 –¥–æ 25 –≥': 1600,
    '–æ—Ç 26 –¥–æ 100 –≥': 2500,
    '–æ—Ç 101 –¥–æ 250 –≥': 5000,
    '–æ—Ç 251 –¥–æ 500 –≥': 10000,
    '–æ—Ç 501 –¥–æ 1000 –≥': 20000,
}

# Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
def get_calculator_message_prof2(user_data):
    total_weight = user_data.get('prof2_total_weight', 5)
    distance = user_data.get('prof2_distance', 1500)
    units = user_data.get('prof2_units', 10)
    order_weight = user_data.get('prof2_order_weight', '–æ—Ç 50 –¥–æ 109 –≥')

    message = (
        f"**–†–∞—Å—Å—á–∏—Ç–∞–π —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å, —Ä–∞—Å—Ö–æ–¥—ã –º—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è!:**\n\n"
        f"‚öñÔ∏è *–ü–µ—Ä–µ–≤–æ–∑–∏–º—ã–π –≤–µ—Å:* {total_weight} –∫–≥\n"
        f"üìç *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* {distance} –∫–º\n"
        f"üî¢ *–ö–æ–ª-–≤–æ –∫–ª–∞–¥–æ–≤:* {units}\n"
        f"‚öñÔ∏è *–í–µ—Å –∫–ª–∞–¥–æ–≤:* {order_weight}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
    )
    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2
async def handle_profession2_start(query, context: ContextTypes.DEFAULT_TYPE):
    user = query.from_user
    bot_token = context.bot.token

    # Log the interaction
    log_interaction(user.id, bot_token, 'profession2_start', 'Opened profession 2 calculator')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2
    await query.message.reply_photo(
        photo='https://ninjabox.org/storage/1b6f0404-b73c-4580-aa51-1d84d86b9534/o4f4ww4zr4kclevt.jpg',
        caption='*–ê–∫–∞–¥–µ–º–∏—è –ü–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤ ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –ø—É—Ç–µ—à–µ—Å—Ç–≤—É—è –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ!*\n\n'
                'üü¶ *–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n\n'
                'üîµ *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* –±—ã—Å—Ç—Ä–æ–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—å–µ—Ä–∞ —Å –Ω—É–ª—è, –∞ —Ç–∞–∫–∂–µ –∫–∞–∫ –∫—É—Ä—Å –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n'
                'üîµ *–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å:* –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥ —Å –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞! –í–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä—ë–º–∞ –¥–æ—Å—Ç–∞–≤–æ–∫ –∏ –≤–∞—à–∏—Ö —É—Å–∏–ª–∏–π.\n'
                'üîµ *–ó–Ω–∞–Ω–∏—è:* –≤—Å—ë –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞—Ö, —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–∑–∞–º–∏, –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–µ –∏ –∫–ª–∏–µ–Ω—Ç–∞—Ö. –ü–æ–ª—É—á–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n'
                'üîµ *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:* —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –±–æ–Ω—É—Å–∞ –∏–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø–µ—Ä–≤–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n'
                'üîµ *–°—Ç–∞—Ç—É—Å:* —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–¥—à–∏–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞ –ê–∫–∞–¥–µ–º–∏–∏ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º.\n'
                'üîµ *–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:* –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n',

        parse_mode='Markdown',
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    context.user_data['prof2_total_weight'] = 5  # –Ω–∞—á–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –≤–µ—Å
    context.user_data['prof2_distance'] = 1500  # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
    context.user_data['prof2_units'] = 10  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    context.user_data['prof2_order_weight'] = '–æ—Ç 251 –¥–æ 500 –≥'  # –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å –∑–∞–∫–∞–∑–æ–≤

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    calculator_keyboard = InlineKeyboardMarkup(CALCULATOR_BUTTONS_PROF2)
    await query.message.reply_text(
        get_calculator_message_prof2(context.user_data),
        reply_markup=calculator_keyboard,
        parse_mode='Markdown',
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2
async def handle_prof2_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    user = query.from_user
    bot_token = context.bot.token

    if data == 'prof2_calc_total_weight_up':
        total_weight = context.user_data.get('prof2_total_weight', 5)
        if total_weight < 1000:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –≤–µ—Å
            total_weight += 1
            context.user_data['prof2_total_weight'] = total_weight

        log_interaction(user.id, bot_token, 'prof2_calc', f'total_weight_up: {total_weight}kg')
        await update_calculator_message_prof2(query, context)

    elif data == 'prof2_calc_total_weight_down':
        total_weight = context.user_data.get('prof2_total_weight', 5)
        if total_weight > 1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –≤–µ—Å
            total_weight -= 1
            context.user_data['prof2_total_weight'] = total_weight
        log_interaction(user.id, bot_token, 'prof2_calc', f'total_weight_down: {total_weight}kg')
        await update_calculator_message_prof2(query, context)

    elif data == 'prof2_calc_distance_up':
        distance = context.user_data.get('prof2_distance', 1500)
        if distance < 10000:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            distance += 100
            context.user_data['prof2_distance'] = distance
        log_interaction(user.id, bot_token, 'prof2_calc', f'distance_up: {distance}km')
        await update_calculator_message_prof2(query, context)

    elif data == 'prof2_calc_distance_down':
        distance = context.user_data.get('prof2_distance', 1500)
        if distance > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            distance -= 100
            context.user_data['prof2_distance'] = distance
        log_interaction(user.id, bot_token, 'prof2_calc', f'distance_down: {distance}km')
        await update_calculator_message_prof2(query, context)

    elif data == 'prof2_calc_units_up':
        units = context.user_data.get('prof2_units', 10)
        if units < 1000:
            units += 1
            context.user_data['prof2_units'] = units
        log_interaction(user.id, bot_token, 'prof2_calc', f'units_up: {units}')
        await update_calculator_message_prof2(query, context)

    elif data == 'prof2_calc_units_down':
        units = context.user_data.get('prof2_units', 10)
        if units > 1:
            units -= 1
            context.user_data['prof2_units'] = units
        log_interaction(user.id, bot_token, 'prof2_calc', f'units_down: {units}')
        await update_calculator_message_prof2(query, context)

    elif data == 'prof2_calc_edit_order_weight':
        order_weight = context.user_data.get('prof2_order_weight', '–æ—Ç 50 –¥–æ 109 –∫–≥')
        current_index = ORDER_WEIGHT_OPTIONS.index(order_weight)
        next_index = (current_index + 1) % len(ORDER_WEIGHT_OPTIONS)
        new_order_weight = ORDER_WEIGHT_OPTIONS[next_index]
        context.user_data['prof2_order_weight'] = new_order_weight
        log_interaction(user.id, bot_token, 'prof2_calc', f'weight_change: {new_order_weight}')
        await update_calculator_message_prof2(query, context)

    elif data == 'prof2_calc_calculate':
        total_weight = context.user_data.get('prof2_total_weight', 5)
        distance = context.user_data.get('prof2_distance', 1500)
        units = context.user_data.get('prof2_units', 10)
        order_weight = context.user_data.get('prof2_order_weight', '–æ—Ç 50 –¥–æ 109 –∫–≥')

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –∑–∞ –æ–±—â–∏–π –≤–µ—Å
        payment_total_weight = 80 * distance * total_weight

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –∑–∞ –∑–∞–∫–∞–∑—ã
        order_weight_cost = ORDER_WEIGHT_COSTS.get(order_weight, 0)
        payment_orders = units * order_weight_cost
        payment_all = payment_orders + payment_total_weight

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        time_spent_hours = (distance / 100) * 2
        time_spent_hours = int(round(time_spent_hours))  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞

        # Log the calculation
        log_interaction(
            user.id,
            bot_token,
            'prof2_calculation',
            f'total_weight:{total_weight}kg, distance:{distance}km, units:{units}, ' +
            f'order_weight:{order_weight}, total_payment:{payment_all}‚ÇΩ'
        )

        result_message = (
            f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:**\n\n"
            f"üí∞ *–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—Ä–µ–≤–æ–∑–∏–º—ã–π –≤–µ—Å:* {payment_total_weight:.2f} ‚ÇΩ\n"
            f"üí∞ *–û–ø–ª–∞—Ç–∞ –∑–∞ –∫–ª–∞–¥—ã:* {payment_orders} ‚ÇΩ\n"
            f"üí∞ *–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∑–∞ —Ä–µ–π—Å:* {payment_all} ‚ÇΩ\n"
            f"‚è∞ *–í—Ä–µ–º—è –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–µ–π—Å:~* {time_spent_hours} —á.\n"
            f" *–ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ, –µ–¥—É –∏ –∂–∏–ª—å—ë*\n"

        )

        await query.edit_message_text(
            result_message,
            reply_markup=InlineKeyboardMarkup(CALCULATOR_RESULT_BUTTONS_PROF2),
            parse_mode='Markdown',
        )

    elif data == 'prof2_calc_back':
        log_interaction(user.id, bot_token, 'prof2_navigation', 'back_to_calculator')
        await query.edit_message_text(
            get_calculator_message_prof2(context.user_data),
            reply_markup=InlineKeyboardMarkup(CALCULATOR_BUTTONS_PROF2),
            parse_mode='Markdown',
        )

    elif data == 'prof2_back_to_professions':
        log_interaction(user.id, bot_token, 'prof2_navigation', 'back_to_professions')
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é",
            reply_markup=get_professions_keyboard()
        )
    elif data == 'prof2_calc_no_op':
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass

    elif data == 'prof2_page2':
        log_interaction(user.id, bot_token, 'prof2_navigation', 'view_page2')
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2
        await send_prof2_page2(query, context)

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2
async def update_calculator_message_prof2(query, context):
    await query.edit_message_text(
        get_calculator_message_prof2(context.user_data),
        reply_markup=InlineKeyboardMarkup(CALCULATOR_BUTTONS_PROF2),
        parse_mode='Markdown',
    )

PAGE2_IMAGE_URL = 'https://ninjabox.org/storage/de5b125a-c679-49a4-990f-f9618b04ed98/3nnf31pqhtzm952v.jpg'
CONTENT = {
    'page2': {
        'text': 'ü•∑–ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å Blackshisha, –ø—Ä–æ—Å—Ç–æ! \n\n'
                '1. –£—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞ —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ VPN ‚Äî –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–≤–æ–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.\n\n'
                '2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ blackshisha.com –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º.\n\n'
                '3. –ü—Ä–æ–π–¥–∏ –æ–±—É—á–µ–Ω–∏–µ ‚Äî –æ–Ω–æ –∑–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –∞ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç—Å—è –≤—ã–¥–∞—á–µ–π —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!\n\n'
                ,
        'image': PAGE2_IMAGE_URL,
        'buttons': [
            [InlineKeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ VPN –∏ –∑–∞—á–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?', url="https://telegra.ph/What-is-VPN-How-It-Works-Types-of-VPN-07-30")],
            [InlineKeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ Tor Browser.\n\n', url="https://telegra.ph/Tor-Browser---A-Complete-Overview-07-30")],
            [InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ö.', url="https://Blackshisha.com")],
            [InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ', url="https://Blackshisha.com")],
            [InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url="https://t.me/wa_mb")],
        ],
    },
}

async def send_prof2_page2(query, context):

    user = query.from_user
    bot_token = context.bot.token
    log_interaction(user.id, bot_token, 'prof2_page2', 'viewed_instructions')

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2 –∏–∑ CONTENT
    page2_content = CONTENT['page2']
    await query.message.reply_photo(
        photo=page2_content['image'],
        caption=page2_content['text'],
        reply_markup=InlineKeyboardMarkup(page2_content['buttons']),
        parse_mode='Markdown',
    )

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2
def setup_handlers(app):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2
    app.add_handler(CallbackQueryHandler(handle_prof2_calculator, pattern='^prof2_.*$'))
